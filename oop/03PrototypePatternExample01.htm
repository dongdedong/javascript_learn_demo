<!DOCTYPE html>
<html>
<head>
    <title>Prototype Pattern Example</title>
    <script type="text/javascript">

        /*
        * 原型模式
        *
        * 无论什么时候，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个prototype
        属性，这个属性指向函数的原型对象。在默认情况下，所有原型对象都会自动获得一个constructor
        （构造函数）属性，这个属性包含一个指向prototype 属性所在函数的指针。就拿前面的例子来说，
        Person.prototype. constructor 指向Person。而通过这个构造函数，我们还可继续为原型对象
        添加其他属性和方法
        *
        * */
        function Person(){
        }
        
        Person.prototype.name = "Nicholas";
        Person.prototype.age = 29;
        Person.prototype.job = "Software Engineer";
        Person.prototype.sayName = function(){
            alert(this.name);
        };
        
        var person1 = new Person();
        person1.sayName();   //"Nicholas"
        console.log(person1);


        var person2 = new Person();
        person2.sayName();   //"Nicholas"
      
//        alert(person1.sayName == person2.sayName);  //true
        
//        alert(Person.prototype.isPrototypeOf(person1));  //true
//        alert(Person.prototype.isPrototypeOf(person2));  //true
        
        //only works if Object.getPrototypeOf() is available
        if (Object.getPrototypeOf){
            //alert(Object.getPrototypeOf(person1) == Person.prototype);  //true
            //alert(Object.getPrototypeOf(person1).name);  //"Nicholas"
        }
        
    </script>
</head>
<body>

</body>
</html>