<!DOCTYPE html>
<html>
<head>
    <title>Prototype Pattern Example</title>
    <script type="text/javascript">
                    
        function Person(){
        }
        
        Person.prototype = {
            constructor: Person,
            name : "Nicholas",
            age : 29,
            job : "Software Engineer",
            sayName : function () {
                alert(this.name);
            }
        };
        
        var friend = new Person();
        
        Person.prototype.sayHi = function(){
            alert("hi");
        };
        
        friend.sayHi();   //"hi" works!

        /*以上代码先创建了Person 的一个实例，并将其保存在person 中。然后，下一条语句在Person.
            prototype 中添加了一个方法sayHi()。即使person 实例是在添加新方法之前创建的，但它仍然可
            以访问这个新方法。其原因可以归结为实例与原型之间的松散连接关系。当我们调用person.sayHi()
            时，首先会在实例中搜索名为sayHi 的属性，在没找到的情况下，会继续搜索原型。因为实例与原型
            之间的连接只不过是一个指针，而非一个副本，因此就可以在原型中找到新的sayHi 属性并返回保存
            在那里的函数。*/


        
    </script>
</head>
<body>

</body>
</html>