<!DOCTYPE html>
<html>
<head>
    <title>Dynamic Prototype Pattern Example</title>
    <script type="text/javascript">


        /*动态原型创建模式*/

        /*有其他OO 语言经验的开发人员在看到独立的构造函数和原型时，很可能会感到非常困惑。动态原
        型模式正是致力于解决这个问题的一个方案，它把所有信息都封装在了构造函数中，而通过在构造函数
        中初始化原型（仅在必要的情况下），又保持了同时使用构造函数和原型的优点。换句话说，可以通过
        检查某个应该存在的方法是否有效，来决定是否需要初始化原型*/


        function Person(name, age, job){
        
            //properties
            this.name = name;
            this.age = age;
            this.job = job;
            
            //methods
            if (typeof this.sayName != "function"){
            
                Person.prototype.sayName = function(){
                    alert(this.name);
                };
                
            }
        }

        var friend = new Person("Nicholas", 29, "Software Engineer");
        friend.sayName();


        
    </script>
</head>
<body>

</body>
</html>